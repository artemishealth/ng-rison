(function(global,factory){typeof exports==="object"&&typeof module!=="undefined"?factory(exports,require("@angular/core")):typeof define==="function"&&define.amd?define(["exports","@angular/core"],factory):(global=global||self,factory((global.zef=global.zef||{},global.zef.ngRison={}),global.ng.core))})(this,function(exports,core){"use strict";const NOT_ID_CHAR=" '!:(),*@$";const NOT_ID_START="-0123456789";const ID_REGULAR_EXPRESSION="[^"+NOT_ID_START+NOT_ID_CHAR+"][^"+NOT_ID_CHAR+"]*";const ɵ0=value=>{return value.substring(0,1)==="0"||value.substring(value.length-1)==="0"};const UTILS={ID_OK:new RegExp("^"+ID_REGULAR_EXPRESSION+"$"),NEXT_ID:new RegExp(ID_REGULAR_EXPRESSION,"g"),LEADING_OR_TRAILING_ZERO:ɵ0};class RisonParser{constructor(errorHandler){this.errorHandler=errorHandler;this.whitespace="";this.index=0;this.message="";this.table={"!":()=>{const s=this.risonString;const c=s.charAt(this.index++);if(!c){return this.error('"!" at end of input')}const x=this.bangs[c];if(typeof x==="function"){return x.call(null,this)}else if(typeof x==="undefined"){return this.error('unknown literal: "!'+c+'"')}return x},"(":()=>{const o={};let c;let count=0;while((c=this.next())!==")"){if(count){if(c!==","){this.error("missing ','")}}else if(c===","){return this.error("extra ','")}else{--this.index}const k=this.readValue();if(typeof k==="undefined"){return undefined}if(this.next()!==":"){return this.error("missing ':'")}const v=this.readValue();if(typeof v==="undefined"){return undefined}o[k]=v;count++}return o},"'":()=>{const s=this.risonString;let i=this.index;let start=i;const segments=[];let c;while((c=s.charAt(i++))!=="'"){if(!c){return this.error('unmatched "\'"')}if(c==="!"){if(start<i-1){segments.push(s.slice(start,i-1))}c=s.charAt(i++);if("!'".indexOf(c)>=0){segments.push(c)}else{return this.error('invalid string escape: "!'+c+'"')}start=i}}if(start<i-1){segments.push(s.slice(start,i-1))}this.index=i;return segments.length===1?segments[0]:segments.join("")},"-":()=>{let s=this.risonString;let i=this.index;const start=i-1;let state="int";let permittedSigns="-";const transitions={"int+.":"frac","int+e":"exp","frac+e":"exp"};do{const c=s.charAt(i++);if(!c){break}if("0"<=c&&c<="9"){continue}if(permittedSigns.indexOf(c)>=0){permittedSigns="";continue}state=transitions[state+"+"+c.toLowerCase()];if(state==="exp"){permittedSigns="-"}}while(state);this.index=--i;s=s.slice(start,i);if(s==="-"){return this.error("invalid number")}if(UTILS.LEADING_OR_TRAILING_ZERO(s)){return s}else{return Number(s)}}};this.bangs={t:true,f:false,n:null,"(":this.parseArray};for(let i=0;i<=9;i++){this.table[String(i)]=this.table["-"]}}parse(risonString){this.risonString=risonString;let value=this.readValue();if(!this.message&&this.next()){value=this.error("unable to parse string as rison: '"+risonString+"'")}if(this.message&&this.errorHandler){this.errorHandler(this.message,this.index)}return value}readValue(){const character=this.next();const parseFn=character&&this.table[character];if(parseFn){return parseFn.apply(this)}const s=this.risonString;const i=this.index-1;UTILS.NEXT_ID.lastIndex=i;const m=UTILS.NEXT_ID.exec(s);if(m&&m.length>0){const id=m[0];this.index=i+id.length;return id}if(character){return this.error("invalid character: '"+character+"'")}return this.error("empty expression")}next(){let character;let ind=this.index;do{if(this.index===this.risonString.length){return undefined}character=this.risonString.charAt(ind++)}while(this.whitespace.indexOf(character)>=0);this.index=ind;return character}error(message){console.error("Rison parser error: ",message);this.message=message;return undefined}parseArray(parser){const ar=[];let c;while((c=parser.next())!==")"){if(!c){return parser.error("unmatched '!('")}if(ar.length){if(c!==","){parser.error("missing ','")}}else if(c===","){return parser.error("extra ','")}else{--parser.index}const n=parser.readValue();if(typeof n==="undefined"){return undefined}ar.push(n)}return ar}}class RisonStringifier{constructor(){this.sq={"'":true,"!":true};this.stringMap={array:arr=>{const stringParts=arr.map(rawValue=>{const fn=this.stringMap[typeof rawValue];if(fn){return fn(rawValue)}});return`!(${stringParts.join(",")})`},boolean:bool=>bool?"!t":"!f",null:n=>"!n",number:num=>{if(!isFinite(num)){return"!n"}return String(num).replace(/\+/,"")},object:obj=>{if(obj){if(obj instanceof Array){return this.stringMap.array(obj)}if(typeof obj.__prototype__==="object"&&typeof obj.__prototype__.encode_rison!=="undefined"){return obj.encode_rison()}const keys=Object.keys(obj);keys.sort();const stringParts=keys.map(key=>{const rawValue=obj[key];const fn=this.stringMap[typeof rawValue];return`${this.stringMap.string(key)}:${fn(rawValue)}`});return`(${stringParts.join(",")})`}return"!n"},string:str=>{if(str===""){return`''`}if(!isNaN(str)&&UTILS.LEADING_OR_TRAILING_ZERO(str)){return str}if(UTILS.ID_OK.test(str)){return str}const formattedString=str.replace(/(['!])/g,(a,b)=>{if(this.sq[b]){return"!"+b}return b});return`'${formattedString}'`},undefined:x=>{throw new Error("rison can't encode the undefined value")}}}stringify(obj){return this.stringMap[typeof obj](obj)}}class RisonService{stringify(obj){return(new RisonStringifier).stringify(obj)}parse(url){const errorCb=e=>{throw Error("rison decoder error: "+e)};const parser=new RisonParser(errorCb);return parser.parse(url)}}RisonService.decorators=[{type:core.Injectable}];class NgRisonModule{}NgRisonModule.decorators=[{type:core.NgModule,args:[{providers:[RisonService]}]}];exports.NgRisonModule=NgRisonModule;exports.RisonParser=RisonParser;exports.RisonService=RisonService;exports.RisonStringifier=RisonStringifier;exports.UTILS=UTILS;Object.defineProperty(exports,"__esModule",{value:true})});